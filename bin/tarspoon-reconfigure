#!/usr/bin/env ruby
# Sets up tarspoon

require 'uri'
require 'pathname'

# Evaluate configuration
def config() eval File.read('/etc/ts.conf') end

# Import GPG public key
def gpg_import(gpgconf) 
  if gpgconf[:key_id] then
    puts "[#{$0}] Getting a key with ID #{gpgconf[:key_id]} from #{gpgconf[:key_srv].to_s}"
    `gpg --keyserver #{gpgconf[:key_srv].to_s} --recv-key #{gpgconf[:key_id]}`
  else
    puts "[#{$0}] Downloading key from #{gpgconf[:url].to_s}"
    filename = Pathname(gpgconf[:url].path).basename.to_s
    `wget -O /tmp/#{filename} #{gpgconf[:url].to_s} &&
     gpg --import /tmp/#{filename}
     rm -vf "/tmp/#{filename}"`
  end
end

# For each server make a tunnel script
def tunnels(xs)
  xs.each {|x| tunnel(x)}
end
def tunnel(x)
  `mktunnel "#{x[:name]}" "#{x[:user]}" "#{x[:fqdn]}" "#{x[:key]}" "#{x[:port] || 22}" "#{x[:reverse_tunnel_port] || Random.rand(10000)+10000}" "#{x[:prefix] || '-f'}" "#{x[:suffix] || ''}"`
end

# Make socks proxy
def socksproxy(x)
  `mksocks "#{x[:user]}" "#{x[:fqdn]}" "#{x[:key]}" "#{x[:port] || 22}" "#{x[:lport] || Random.rand(10000)+10000}"`
end

# Systemctl
def systemctl() 
  `systemctl enable wicd && systemctl restart wicd ;
   systemctl enable logkeys && systemctl restart logkeys ;
   systemctl enable tarspoon && systemctl restart tarspoon`
end

cfg = config()

gpg_import(cfg[:key])
tunnels(cfg[:servers])
socksproxy(cfg[:socks]) if cfg[:socks]
systemctl()
